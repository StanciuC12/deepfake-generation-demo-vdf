# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sTg83EXzzBQ8NYUGL-aoMUjLJ9Y-FQUY
"""

# !git clone https://github.com/StanciuC12/deepfake-generation-demo-vdf.git
# %cd deepfake-generation-demo-vdf

# detector = LandMarkDetector()
# detector.empty_dir('out')
# for file in os.listdir('videos'):
#   print(file)
#   video_adr = os.path.join('videos', 'id31_0005.mp4')
#   detector.video2croppedImages(video_path=video_adr, name_prefix=file.split('.')[0])

from LandMarkDetector import LandMarkDetector
import os
import random
from torchvision import transforms
import cv2
import torch

class DataLoader:

  def __init__(self, classes, data_folder='out', batch_size=16):

    self.classes=classes
    self.batch_size = batch_size
    self.data_folder = data_folder
    self.files = os.listdir(self.data_folder)
    random.shuffle(self.files)
    self.class_files = [[x for x in self.files if y in x] for y in classes]
    self.transform = transforms.Compose([
                    transforms.ToTensor(dtype=torch.float64),
                    ])
    self.min_batches_each_class = min([len(x) for x in self.class_files])//self.batch_size

  def shuffle_data(self):

    random.shuffle(self.files)
    self.class_files = [[x for x in self.files if y in x] for y in self.classes]
    self.batches_loaded=0

  def get_data(self, class_nr, batch_nr):

    files2read = self.class_files[class_nr][batch_nr*self.batch_size:(batch_nr+1)*self.batch_size]
    imgs = []
    for file_name in files2read:
      img = cv2.imread(os.path.join(self.data_folder, file_name))
      img = self.transform(img)
      imgs.append(img)

    return torch.stack(imgs).reshape(-1, 3, 256, 256)



if __name__ == '__main__':
  loader = DataLoader(classes=['id19_', 'id31_'])
  d1 = loader.get_data(class_nr=0, batch_nr=1)